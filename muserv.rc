#[crate_id="muserv#0.0.1"];
#[crate_type="bin"];
#[desc="A MU* server"];
#[license="GPL2+"];

#[warn(unnecessary_qualification, non_camel_case_types, non_uppercase_statics, unnecessary_typecast, unused_result)];

use std::task;
use std::io::timer;
use std::os;
use net::{Command, Response, netEntry};

mod db;
mod net;

fn main()
{
    let (port, netChan) = Chan::new();
    let (netPort, chan) = Chan::new();

    let mut builder = task::task();
    builder.name("<net>");
    builder.spawn(proc(){netEntry(netPort, netChan)});

    loop {
        match port.recv_opt() {
            Some(command) => match handleCommand(command) {
                Some(response) => chan.send(response),
                None           => return
            },
            None          => {
                os::set_exit_status(1);
                timer::sleep(1000);
                return
            }
        }
    }
}

fn handleCommand(command : Command) -> Option<Response>
{
    match command {
        net::ShutDownComplete         => None,
        net::TelnetCommand(id, what)  => Some(net::UniCast(id, format!("You sent me a telnet command: {}", what))),
        net::PlayerString(id, string) => Some(net::UniCast(id, string))
    }
}
